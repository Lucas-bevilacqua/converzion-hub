import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from '@supabase/supabase-js'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    console.log('üîÑ [DEBUG] Fetching follow-ups to process')

    // Get all active follow-ups
    const { data: followUps, error: followUpsError } = await supabaseClient
      .from('instance_follow_ups')
      .select('*, evolution_instances!inner(*)')
      .eq('is_active', true)
      .filter('execution_count', 'lt', 'max_attempts')
      .filter('evolution_instances.connection_status', 'eq', 'connected')

    if (followUpsError) {
      console.error('‚ùå [ERROR] Error fetching follow-ups:', followUpsError)
      throw followUpsError
    }

    console.log('‚úÖ [DEBUG] Found follow-ups:', followUps?.length)

    // Process each follow-up
    const results = await Promise.all(
      (followUps ?? []).map(async (followUp) => {
        try {
          // Update execution count and time
          const { error: updateError } = await supabaseClient
            .from('instance_follow_ups')
            .update({
              execution_count: (followUp.execution_count || 0) + 1,
              last_execution_time: new Date().toISOString()
            })
            .eq('id', followUp.id)

          if (updateError) {
            console.error('‚ùå [ERROR] Error updating follow-up:', updateError)
            throw updateError
          }

          // Get contacts that haven't been processed yet
          const { data: contacts, error: contactsError } = await supabaseClient
            .from('instance_contacts')
            .select('*')
            .eq('instance_id', followUp.instance_id)
            .eq('follow_up_status', 'pending')
            .limit(50)

          if (contactsError) {
            console.error('‚ùå [ERROR] Error fetching contacts:', contactsError)
            throw contactsError
          }

          // Process contacts based on follow-up type
          if (followUp.follow_up_type === 'ai_generated') {
            await Promise.all(contacts.map(async (contact) => {
              try {
                // Generate AI message
                const response = await fetch('https://api.openai.com/v1/chat/completions', {
                  method: 'POST',
                  headers: {
                    'Authorization': `Bearer ${Deno.env.get('OPENAI_API_KEY')}`,
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({
                    model: 'gpt-3.5-turbo',
                    messages: [
                      {
                        role: 'system',
                        content: followUp.system_prompt || 'You are a helpful assistant generating follow-up messages.'
                      },
                      {
                        role: 'user',
                        content: `Generate a follow-up message for a contact named ${contact.name}. The message should be friendly and professional.`
                      }
                    ],
                    temperature: 0.7,
                  }),
                })

                const aiResponse = await response.json()
                const message = aiResponse.choices[0]?.message?.content

                if (!message) {
                  throw new Error('No message generated by AI')
                }

                // Send message via WhatsApp API
                const whatsappResponse = await fetch(`${Deno.env.get('WHATSAPP_API_URL')}/send-message`, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${followUp.evolution_instances.auth_token}`
                  },
                  body: JSON.stringify({
                    phone: contact.phone_number,
                    message: message
                  })
                })

                if (!whatsappResponse.ok) {
                  throw new Error('Failed to send WhatsApp message')
                }

                // Update contact status
                await supabaseClient
                  .from('instance_contacts')
                  .update({
                    follow_up_status: 'completed',
                    last_message_sent: message,
                    last_message_time: new Date().toISOString()
                  })
                  .eq('id', contact.id)

              } catch (error) {
                console.error('‚ùå [ERROR] Error processing AI contact:', error)
                await supabaseClient
                  .from('instance_contacts')
                  .update({
                    follow_up_status: 'failed',
                    error_message: error.message
                  })
                  .eq('id', contact.id)
              }
            }))
          } else {
            // Process manual follow-ups
            const messages = followUp.manual_messages || []
            await Promise.all(contacts.map(async (contact) => {
              try {
                for (const msgConfig of messages) {
                  // Send message via WhatsApp API
                  const whatsappResponse = await fetch(`${Deno.env.get('WHATSAPP_API_URL')}/send-message`, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json',
                      'Authorization': `Bearer ${followUp.evolution_instances.auth_token}`
                    },
                    body: JSON.stringify({
                      phone: contact.phone_number,
                      message: msgConfig.message
                    })
                  })

                  if (!whatsappResponse.ok) {
                    throw new Error('Failed to send WhatsApp message')
                  }

                  // Wait for specified delay before sending next message
                  await new Promise(resolve => setTimeout(resolve, msgConfig.delay_minutes * 60 * 1000))
                }

                // Update contact status after all messages sent
                await supabaseClient
                  .from('instance_contacts')
                  .update({
                    follow_up_status: 'completed',
                    last_message_sent: messages[messages.length - 1]?.message,
                    last_message_time: new Date().toISOString()
                  })
                  .eq('id', contact.id)

              } catch (error) {
                console.error('‚ùå [ERROR] Error processing manual contact:', error)
                await supabaseClient
                  .from('instance_contacts')
                  .update({
                    follow_up_status: 'failed',
                    error_message: error.message
                  })
                  .eq('id', contact.id)
              }
            }))
          }

          return { success: true, followUpId: followUp.id }
        } catch (error) {
          console.error('‚ùå [ERROR] Error processing follow-up:', error)
          return { success: false, followUpId: followUp.id, error }
        }
      })
    )

    return new Response(
      JSON.stringify({ success: true, results }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )

  } catch (error) {
    console.error('‚ùå [ERROR] Unhandled error:', error)
    return new Response(
      JSON.stringify({ success: false, error: error.message }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
    )
  }
})